/// <reference types="node" />
import { Account, PublicKey, TransactionInstruction } from '@solana/web3.js';
import { Provider } from './provider';
import { MintInfo, AccountInfo } from '@solana/spl-token';
import BN from 'bn.js';
export * from './provider';
export * as token from './token';
export { simulateTransaction } from './simulate-transaction';
export * as connection from './connection';
export declare const SPL_SHARED_MEMORY_ID: PublicKey;
export declare function createMint(provider: Provider, authority?: PublicKey, decimals?: number): Promise<PublicKey>;
export declare function createMintInstructions(provider: Provider, authority: PublicKey, mint: PublicKey, decimals?: number): Promise<TransactionInstruction[]>;
export declare function createMintAndVault(provider: Provider, amount: BN, owner?: PublicKey, decimals?: number): Promise<[PublicKey, PublicKey]>;
export declare function createTokenAccount(provider: Provider, mint: PublicKey, owner: PublicKey): Promise<PublicKey>;
export declare function createTokenAccountInstrs(provider: Provider, newAccountPubkey: PublicKey, mint: PublicKey, owner: PublicKey, lamports?: number): Promise<TransactionInstruction[]>;
export declare function createAccountRentExempt(provider: Provider, programId: PublicKey, size: number): Promise<Account>;
export declare function getMintInfo(provider: Provider, addr: PublicKey): Promise<MintInfo>;
export declare function parseMintAccount(data: Buffer): MintInfo;
export declare function getTokenAccount(provider: Provider, addr: PublicKey): Promise<AccountInfo>;
export declare function parseTokenAccount(data: Buffer): AccountInfo;
export declare function sleep(ms: number): Promise<any>;
export declare type ProgramAccount<T> = {
    publicKey: PublicKey;
    account: T;
};
//# sourceMappingURL=index.d.ts.map