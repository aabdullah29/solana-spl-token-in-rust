"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOwnedAccountsFilters = exports.parseMintData = exports.parseTokenAccountData = exports.MINT_LAYOUT = exports.ACCOUNT_LAYOUT = exports.getOwnedTokenAccounts = void 0;
const web3_js_1 = require("@solana/web3.js");
const serum_1 = require("@project-serum/serum");
const bs58 = __importStar(require("bs58"));
const BufferLayout = __importStar(require("buffer-layout"));
async function getOwnedTokenAccounts(connection, publicKey) {
    let filters = getOwnedAccountsFilters(publicKey);
    // @ts-ignore
    let resp = await connection._rpcRequest('getProgramAccounts', [
        serum_1.TokenInstructions.TOKEN_PROGRAM_ID.toBase58(),
        {
            commitment: connection.commitment,
            filters,
        },
    ]);
    if (resp.error) {
        throw new Error('failed to get token accounts owned by ' +
            publicKey.toBase58() +
            ': ' +
            resp.error.message);
    }
    return (resp.result
        // @ts-ignore
        .map(({ pubkey, account: { data } }) => {
        data = bs58.decode(data);
        return {
            publicKey: new web3_js_1.PublicKey(pubkey),
            account: parseTokenAccountData(data),
        };
    }));
}
exports.getOwnedTokenAccounts = getOwnedTokenAccounts;
// todo: remove
exports.ACCOUNT_LAYOUT = BufferLayout.struct([
    BufferLayout.blob(32, 'mint'),
    BufferLayout.blob(32, 'owner'),
    BufferLayout.nu64('amount'),
    BufferLayout.blob(93),
]);
exports.MINT_LAYOUT = BufferLayout.struct([
    BufferLayout.blob(44),
    BufferLayout.u8('decimals'),
    BufferLayout.blob(37),
]);
function parseTokenAccountData(data) {
    // @ts-ignore
    let { mint, owner, amount } = exports.ACCOUNT_LAYOUT.decode(data);
    return {
        mint: new web3_js_1.PublicKey(mint),
        owner: new web3_js_1.PublicKey(owner),
        amount,
    };
}
exports.parseTokenAccountData = parseTokenAccountData;
// @ts-ignore
function parseMintData(data) {
    // @ts-ignore
    let { decimals } = exports.MINT_LAYOUT.decode(data);
    return { decimals };
}
exports.parseMintData = parseMintData;
// @ts-ignore
function getOwnedAccountsFilters(publicKey) {
    return [
        {
            memcmp: {
                // @ts-ignore
                offset: exports.ACCOUNT_LAYOUT.offsetOf('owner'),
                bytes: publicKey.toBase58(),
            },
        },
        {
            dataSize: exports.ACCOUNT_LAYOUT.span,
        },
    ];
}
exports.getOwnedAccountsFilters = getOwnedAccountsFilters;
//# sourceMappingURL=token.js.map